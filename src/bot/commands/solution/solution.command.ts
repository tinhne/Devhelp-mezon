import { Command } from 'src/bot/base/commandRegister.decorator';
import { CommandMessage } from 'src/bot/base/command.abstract';
import { ChannelMessage, EMarkdownType } from 'mezon-sdk';
import { SolutionService } from 'src/bot/services/solution.service';
import { BugService } from 'src/bot/services/bug.service';
import { MezonClientService } from 'src/mezon/services/mezon-client.service';
import { getRandomColor } from 'src/bot/utils/helps';
import { ButtonAction, MessageComponentType, BugStatus } from 'src/bot/constants/types';
import { ActionRowComponent, ButtonComponent } from 'src/bot/constants/interfaces';
import { parseArgs } from 'src/bot/utils/parse-args';
import { safeReply, createReplyOptions, createPreMarkdown } from 'src/bot/utils/reply-helpers';

@Command('solution')
export class SolutionCommand extends CommandMessage {
  constructor(
    private solutionService: SolutionService,
    private bugService: BugService,
    clientService: MezonClientService,
  ) {
    super(clientService);
  }

  async execute(args: string[], message: ChannelMessage): Promise<any> {
    const messageChannel = await this.getChannelMessage(message);
    if (!messageChannel) return;

    if (args.length === 0) {
      return this.showHelp(messageChannel);
    }

    const subCommand = args[0].toLowerCase();
    const remainingArgs = parseArgs(args.slice(1)); // S·ª≠ d·ª•ng helper m·ªõi

    try {
      switch (subCommand) {
        case 'create':
          return this.handleCreate(remainingArgs, messageChannel);
        case 'list':
          return this.handleList(remainingArgs, messageChannel);
        case 'detail':
          return this.handleDetail(remainingArgs, messageChannel);
        case 'update':
          return this.handleUpdate(remainingArgs, messageChannel);
        default:
          return this.showHelp(messageChannel);
      }
    } catch (error) {
      console.error('Error in SolutionCommand:', error);
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }
  

private async showHelp(messageChannel: any): Promise<any> {
    return safeReply(messageChannel, {
      t: 'üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh solution',
      embed: [
        {
          color: getRandomColor(),
          title: 'DevHelper - Solution Help',
          description: 'C√¥ng c·ª• qu·∫£n l√Ω gi·∫£i ph√°p cho bug:',
          fields: [            {
              name: 'üìã Li·ªát k√™ gi·∫£i ph√°p theo bug',
              value: '*solution list --bug-id=47\n\n' +
                'Hi·ªÉn th·ªã t·∫•t c·∫£ gi·∫£i ph√°p ƒë√£ ƒë·ªÅ xu·∫•t cho bug c√≥ ID 47.'
            },
            {
              name: 'üîç Xem chi ti·∫øt gi·∫£i ph√°p',
              value: '*solution detail --id=28\n\n' +
                'Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa gi·∫£i ph√°p c√≥ ID 28, bao g·ªìm code v√† m√¥ t·∫£ ƒë·∫ßy ƒë·ªß.'
            },
            {
              name: '‚ûï Th√™m gi·∫£i ph√°p m·ªõi',
              value: '*solution create --bug-id=47 --title="S·ª≠a l·ªói refresh token"\n\n' +
                'Tham s·ªë b·∫Øt bu·ªôc: `--bug-id` v√† `--title`'
            },
            {
              name: '‚úèÔ∏è C·∫≠p nh·∫≠t gi·∫£i ph√°p',
              value: '*solution update --id=28 --title="Ti√™u ƒë·ªÅ m·ªõi"\n' +
                '*solution update --id=28 --code="// Code m·ªõi ƒë√£ s·ª≠a l·ªói"'
            },
            {
              name: 'üíª V√≠ d·ª• ƒë·∫ßy ƒë·ªß',
              value: '*solution create --bug-id=47 --title="S·ª≠a l·ªói refresh token" --desc="M√¥ t·∫£ v·ªÅ l·ªói" --code="function fix() { ... }"'
            },
            {
              name: 'üìù L∆∞u √Ω quan tr·ªçng',
              value: '‚Ä¢ Khi t·∫°o gi·∫£i ph√°p m·ªõi, ph·∫£i c√≥ `--bug-id` v√† `--title`\n' +
                '‚Ä¢ Khi li·ªát k√™ gi·∫£i ph√°p, ph·∫£i cung c·∫•p `--bug-id`\n' +
                '‚Ä¢ Khi xem chi ti·∫øt ho·∫∑c c·∫≠p nh·∫≠t, ph·∫£i cung c·∫•p `--id`\n' +
                '‚Ä¢ T·∫°o gi·∫£i ph√°p cho bug "open" s·∫Ω t·ª± ƒë·ªông ƒë·ªïi tr·∫°ng th√°i th√†nh "in_progress"'
            }
          ],
          footer: {
            text: 'G√µ *solution ƒë·ªÉ hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y',
          },
        },
      ],
    });
  }

  private async handleCreate(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { 'bug-id': bugId, title, desc, code } = args;

    if (!bugId || isNaN(parseInt(bugId))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --bug-id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --bug-id (s·ªë).')
        )
      );
    }

    if (!title) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title.',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title.')
        )
      );
    }

    try {
      const bug = await this.bugService.findById(parseInt(bugId));
      const newSolution = await this.solutionService.create({
        title,
        description: desc || '',
        code: code || '',
        bug: bug,
      });

      if (bug.status === 'open') {
        await this.bugService.update(bug.id, {
          status: BugStatus.IN_PROGRESS,
        });
      }

      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚úÖ ƒê√£ th√™m gi·∫£i ph√°p! ID: ${newSolution.id}\nBug: #${bug.id} - ${bug.title}\n\nS·ª≠ d·ª•ng /solution detail --id=${newSolution.id} ƒë·ªÉ xem chi ti·∫øt.`,
          createPreMarkdown(`‚úÖ ƒê√£ th√™m gi·∫£i ph√°p! ID: ${newSolution.id}\nBug: #${bug.id} - ${bug.title}\n\nS·ª≠ d·ª•ng /solution detail --id=${newSolution.id} ƒë·ªÉ xem chi ti·∫øt.`)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleList(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { 'bug-id': bugId } = args;

    if (!bugId || isNaN(parseInt(bugId))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --bug-id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --bug-id (s·ªë).')
        )
      );
    }

    try {
      const bug = await this.bugService.findById(parseInt(bugId));
      const solutions = await this.solutionService.listByBugId(parseInt(bugId));

      if (solutions.length === 0) {
        const actionRow: ActionRowComponent = {
          type: MessageComponentType.ACTION_ROW,
        } as ActionRowComponent;

        return safeReply(
          messageChannel,
          {
            ...createReplyOptions(
              `üìã Kh√¥ng t√¨m th·∫•y gi·∫£i ph√°p n√†o cho bug #${bugId}: "${bug.title}".\n\nS·ª≠ d·ª•ng /solution create --bug-id=${bugId} ƒë·ªÉ th√™m gi·∫£i ph√°p.`,
              createPreMarkdown(`üìã Kh√¥ng t√¨m th·∫•y gi·∫£i ph√°p n√†o cho bug #${bugId}: "${bug.title}".\n\nS·ª≠ d·ª•ng /solution create --bug-id=${bugId} ƒë·ªÉ th√™m gi·∫£i ph√°p.`)
            ),
            components: [actionRow],
          }
        );
      }

      let listText = `üìã Gi·∫£i ph√°p cho bug #${bugId}: "${bug.title}":\n\n`;
      solutions.forEach((solution, index) => {
        listText += `${index + 1}. #${solution.id}: ${solution.title}\n`;
      });
      listText += '\nüìå C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n';
      listText += `‚Ä¢ /solution detail --id=${solutions[0].id}    (Xem chi ti·∫øt gi·∫£i ph√°p)\n`;
      listText += `‚Ä¢ /solution update --id=${solutions[0].id}    (C·∫≠p nh·∫≠t gi·∫£i ph√°p)\n`;
      listText += `‚Ä¢ /solution create --bug-id=${bugId}    (Th√™m gi·∫£i ph√°p m·ªõi)\n`;

      return safeReply(
        messageChannel,
        createReplyOptions(
          listText,
          createPreMarkdown(listText)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleDetail(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const solution = await this.solutionService.findById(parseInt(id));
      const createdAt = new Date(solution.createdAt);
      const formattedDate = `${createdAt.toLocaleDateString()}, ${createdAt.toLocaleTimeString()}`;
      let codeDisplay = 'Kh√¥ng c√≥ code';
      if (solution.code) {
        codeDisplay = `\`\`\`\n${solution.code}\n\`\`\``;
      }

      return safeReply(
        messageChannel,
        {
          embed: [
            {
              color: getRandomColor(),
              title: `üí° Gi·∫£i ph√°p #${solution.id}: "${solution.title}"`,
              fields: [
                {
                  name: 'Cho bug',
                  value: `#${solution.bug.id} - ${solution.bug.title}`,
                },
                {
                  name: 'M√¥ t·∫£',
                  value: solution.description || 'Kh√¥ng c√≥ m√¥ t·∫£',
                },
                {
                  name: 'Code',
                  value: codeDisplay,
                },
                {
                  name: 'ƒê√£ t·∫°o',
                  value: formattedDate,
                },
              ],
              footer: {
                text: 'DevHelper Bot',
              },
            },
          ],
        }
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleUpdate(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id, title, desc, code } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const existingSolution = await this.solutionService.findById(parseInt(id));
      const updateData: any = {};
      if (title) updateData.title = title;
      if (desc !== undefined) updateData.description = desc;
      if (code !== undefined) updateData.code = code;

      if (Object.keys(updateData).length === 0) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            '‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.',
            createPreMarkdown('‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.')
          )
        );
      }

      await this.solutionService.update(parseInt(id), updateData);
      const updatedSolution = await this.solutionService.findById(parseInt(id));

      let changesText = '';
      for (const key of Object.keys(updateData)) {
        let oldValue = existingSolution[key];
        let newValue = updatedSolution[key];
        if (key === 'code') {
          oldValue = oldValue ? '(c√≥ code)' : '(kh√¥ng c√≥ code)';
          newValue = newValue ? '(c√≥ code m·ªõi)' : '(kh√¥ng c√≥ code)';
        }
        changesText += `‚Ä¢ ${key}: ${oldValue} ‚ûî ${newValue}\n`;
      }

      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·∫£i ph√°p #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /solution detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`,
          createPreMarkdown(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·∫£i ph√°p #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /solution detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }
}