import { Command } from 'src/bot/base/commandRegister.decorator';
import { CommandMessage } from 'src/bot/base/command.abstract';
import { ChannelMessage } from 'mezon-sdk';
import { SearchService } from 'src/bot/services/search.service';
import { MezonClientService } from 'src/mezon/services/mezon-client.service';
import { getRandomColor } from 'src/bot/utils/helps';
import {
  ButtonAction,
  MessageComponentType,
} from 'src/bot/constants/types';
import {
  ActionRowComponent,
  ButtonComponent,
} from 'src/bot/constants/interfaces';
// Th√™m import helper reply
import { safeReply, createReplyOptions, createPreMarkdown } from 'src/bot/utils/reply-helpers';

@Command('search')
export class SearchCommand extends CommandMessage {
  constructor(
    private searchService: SearchService,
    clientService: MezonClientService,
  ) {
    super(clientService);
  }

  async execute(args: string[], message: ChannelMessage): Promise<any> {
    const messageChannel = await this.getChannelMessage(message);
    if (!messageChannel) return;

    if (args.length === 0) {
      return this.showHelp(messageChannel);
    }

    const type = args[0].toLowerCase();

    if (type === 'commands' || type === 'bugs' || type === 'solutions') {
      // T√¨m ki·∫øm theo lo·∫°i c·ª• th·ªÉ
      return this.handleTypeSearch(type, args.slice(1), messageChannel);
    } else {
      // N·∫øu kh√¥ng ph·∫£i l√† lo·∫°i c·ª• th·ªÉ, coi nh∆∞ t√¨m ki·∫øm t·∫•t c·∫£ v·ªõi t·ª´ kh√≥a l√† t·∫•t c·∫£ args
      return this.handleGenericSearch(args, messageChannel);
    }
  }

  private async showHelp(messageChannel: any): Promise<any> {
    return safeReply(messageChannel, {
      t: 'üîç H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh search',
      embed: [
        {
          color: getRandomColor(),
          title: 'DevHelper - Search Help',
          description: 'C√¥ng c·ª• t√¨m ki·∫øm th√¥ng tin trong h·ªá th·ªëng:',
          fields: [
            {
              name: 'üîé T√¨m ki·∫øm t·ªïng h·ª£p',
              value: '*search [t·ª´ kh√≥a]\n\n' +
                'T√¨m ki·∫øm t·∫•t c·∫£ c√°c lo·∫°i (l·ªánh, bug, gi·∫£i ph√°p) c√πng l√∫c.\n\n' +
                'V√≠ d·ª•: `*search git commit`'
            },
            {
              name: 'üìù T√¨m ki·∫øm l·ªánh',
              value: '*search commands [t·ª´ kh√≥a]\n\n' +
                'Ch·ªâ t√¨m ki·∫øm trong c√°c l·ªánh ƒë√£ l∆∞u.\n\n' +
                'V√≠ d·ª•: `*search commands stash`'
            },
            {
              name: 'üêõ T√¨m ki·∫øm bug',
              value: '*search bugs [t·ª´ kh√≥a]\n\n' +
                'Ch·ªâ t√¨m ki·∫øm trong c√°c b√°o c√°o bug.\n\n' +
                'V√≠ d·ª•: `*search bugs token`'
            },
            {
              name: 'üí° T√¨m ki·∫øm gi·∫£i ph√°p',
              value: '*search solutions [t·ª´ kh√≥a]\n\n' +
                'Ch·ªâ t√¨m ki·∫øm trong c√°c gi·∫£i ph√°p ƒë√£ ƒë·ªÅ xu·∫•t.\n\n' +
                'V√≠ d·ª•: `*search solutions authentication`'
            },
            {
              name: 'üìå L∆∞u √Ω khi s·ª≠ d·ª•ng',
              value: '‚Ä¢ T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng\n' +
                '‚Ä¢ T·ª´ kh√≥a c√≥ th·ªÉ g·ªìm nhi·ªÅu t·ª´ c√°ch nhau b·ªüi d·∫•u c√°ch\n' +
                '‚Ä¢ K·∫øt qu·∫£ t√¨m ki·∫øm t·ªïng h·ª£p hi·ªÉn th·ªã t·ªëi ƒëa 5 k·∫øt qu·∫£ cho m·ªói lo·∫°i\n' +
                '‚Ä¢ T√¨m ki·∫øm ƒë∆∞·ª£c th·ª±c hi·ªán trong ti√™u ƒë·ªÅ, m√¥ t·∫£ v√† c√°c tr∆∞·ªùng li√™n quan'
            }
          ],
          footer: {
            text: 'G√µ *search [t·ª´ kh√≥a] ƒë·ªÉ b·∫Øt ƒë·∫ßu t√¨m ki·∫øm',
          },
        },
      ],
    });
  }

  private async handleGenericSearch(
    args: string[],
    messageChannel: any,
  ): Promise<any> {
    if (args.length === 0) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm!',
          createPreMarkdown('‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm!')
        )
      );
    }

    const query = args.join(' ');

    try {
      // T√¨m ki·∫øm ƒëa lo·∫°i
      const results = await this.searchService.search(query);

      if (
        results.commands.length === 0 &&
        results.bugs.length === 0 &&
        results.solutions.length === 0
      ) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            `üîç Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho "${query}".`,
            createPreMarkdown(`üîç Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho "${query}".`)
          )
        );
      }

      // T·∫°o n·ªôi dung hi·ªÉn th·ªã k·∫øt qu·∫£
      let resultText = `üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho "${query}":\n\n`;

      // Hi·ªÉn th·ªã l·ªánh
      if (results.commands.length > 0) {
        resultText += `üìù L·ªÜNH (${results.commands.length}):\n`;
        results.commands.slice(0, 5).forEach((cmd, index) => {
          resultText += `${index + 1}. #${cmd.id}: ${cmd.title} - ${cmd.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        });
        if (results.commands.length > 5) {
          resultText += `... v√† ${results.commands.length - 5} l·ªánh kh√°c\n`;
        }
        resultText += '\n';
      }

      // Hi·ªÉn th·ªã bug
      if (results.bugs.length > 0) {
        resultText += `üêõ BUG (${results.bugs.length}):\n`;
        results.bugs.slice(0, 5).forEach((bug, index) => {
          resultText += `${index + 1}. #${bug.id}: ${bug.title} - ${bug.status} (${bug.severity})\n`;
        });
        if (results.bugs.length > 5) {
          resultText += `... v√† ${results.bugs.length - 5} bug kh√°c\n`;
        }
        resultText += '\n';
      }

      // Hi·ªÉn th·ªã gi·∫£i ph√°p
      if (results.solutions.length > 0) {
        resultText += `üí° GI·∫¢I PH√ÅP (${results.solutions.length}):\n`;
        results.solutions.slice(0, 5).forEach((solution, index) => {
          resultText += `${index + 1}. #${solution.id}: ${solution.title} - Bug: #${solution.bug.id}\n`;
        });
        if (results.solutions.length > 5) {
          resultText += `... v√† ${results.solutions.length - 5} gi·∫£i ph√°p kh√°c\n`;
        }
      }

      return safeReply(
        messageChannel,
        createReplyOptions(
          resultText,
          createPreMarkdown(resultText)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói khi t√¨m ki·∫øm: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói khi t√¨m ki·∫øm: ${error.message}`)
        )
      );
    }
  }

  private async handleTypeSearch(
    type: string,
    args: string[],
    messageChannel: any,
  ): Promise<any> {
    if (args.length === 0) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm!',
          createPreMarkdown('‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm!')
        )
      );
    }

    const query = args.join(' ');

    try {
      // T√¨m ki·∫øm theo lo·∫°i
      const results = await this.searchService.searchByType(query, type);

      if (results.length === 0) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            `üîç Kh√¥ng t√¨m th·∫•y ${this.getTypeDisplayName(type)} n√†o cho "${query}".`,
            createPreMarkdown(`üîç Kh√¥ng t√¨m th·∫•y ${this.getTypeDisplayName(type)} n√†o cho "${query}".`)
          )
        );
      }

      // T·∫°o n·ªôi dung hi·ªÉn th·ªã k·∫øt qu·∫£
      let resultText = `üîç K·∫øt qu·∫£ t√¨m ki·∫øm ${this.getTypeDisplayName(type)} cho "${query}":\n\n`;

      results.forEach((item, index) => {
        if (type === 'commands') {
          resultText += `${index + 1}. #${item.id}: ${item.title} - ${item.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
        } else if (type === 'bugs') {
          const solutionCount = item.solutions ? item.solutions.length : 0;
          resultText += `${index + 1}. #${item.id}: ${item.title} - ${item.status} (${item.severity})${solutionCount > 0 ? ` - ${solutionCount} gi·∫£i ph√°p` : ''}\n`;
        } else if (type === 'solutions') {
          resultText += `${index + 1}. #${item.id}: ${item.title} - Bug: #${item.bug.id} - ${item.bug.title}\n`;
        }
      });

      return safeReply(
        messageChannel,
        createReplyOptions(
          resultText,
          createPreMarkdown(resultText)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói khi t√¨m ki·∫øm: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói khi t√¨m ki·∫øm: ${error.message}`)
        )
      );
    }
  }

  // Helper methods
  private getTypeDisplayName(type: string): string {
    switch (type) {
      case 'commands':
        return 'l·ªánh';
      case 'bugs':
        return 'bug';
      case 'solutions':
        return 'gi·∫£i ph√°p';
      default:
        return type;
    }
  }

  private getSingularType(type: string): string {
    switch (type) {
      case 'commands':
        return 'command';
      case 'bugs':
        return 'bug';
      case 'solutions':
        return 'solution';
      default:
        return type;
    }
  }
}