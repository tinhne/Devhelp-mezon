import { Command } from 'src/bot/base/commandRegister.decorator';
import { CommandMessage } from 'src/bot/base/command.abstract';
import { ChannelMessage } from 'mezon-sdk';
import { BugService } from 'src/bot/services/bug.service';
import { MezonClientService } from 'src/mezon/services/mezon-client.service';
import { getRandomColor } from 'src/bot/utils/helps';
import { ButtonAction, MessageComponentType, BugStatus, BugSeverity } from 'src/bot/constants/types';
import { ActionRowComponent, ButtonComponent } from 'src/bot/constants/interfaces';
import { parseArgs } from 'src/bot/utils/parse-args';
import { safeReply, createReplyOptions, createPreMarkdown } from 'src/bot/utils/reply-helpers';

@Command('bug')
export class BugCommand extends CommandMessage {
  constructor(
    private bugService: BugService,
    clientService: MezonClientService,
  ) {
    super(clientService);
  }

  async execute(args: string[], message: ChannelMessage): Promise<any> {
    const messageChannel = await this.getChannelMessage(message);
    if (!messageChannel) return;

    if (args.length === 0) {
      return this.showHelp(messageChannel);
    }

    const subCommand = args[0].toLowerCase();
    const remainingArgs = parseArgs(args.slice(1)); // S·ª≠ d·ª•ng helper m·ªõi

    try {
      switch (subCommand) {
        case 'create':
          return this.handleCreate(remainingArgs, messageChannel);
        case 'list':
          return this.handleList(remainingArgs, messageChannel);
        case 'detail':
          return this.handleDetail(remainingArgs, messageChannel);
        case 'update':
          return this.handleUpdate(remainingArgs, messageChannel);
        default:
          return this.showHelp(messageChannel);
      }
    } catch (error) {
      console.error('Error in BugCommand:', error);
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async showHelp(messageChannel: any): Promise<any> {
    return safeReply(messageChannel, {
      t: 'üêõ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh bug',
      embed: [
        {
          color: getRandomColor(),
          title: 'DevHelper - Bug Tracker',
          description: 'C√¥ng c·ª• gi√∫p qu·∫£n l√Ω b√°o c√°o v√† theo d√µi bug:',
          fields: [
            {
              name: 'üìù T·∫°o b√°o c√°o bug m·ªõi',
              value: '*bug create --title="JWT token kh√¥ng refresh" --desc="M√¥ t·∫£ l·ªói" --severity="high"\n\n' +
                'M·ª©c ƒë·ªô: `low`, `medium`, `high`, `critical`'
            },
            {
              name: 'üìã Li·ªát k√™ bug theo tr·∫°ng th√°i',
              value: '*bug list --status="open"\n\n' +
                'Tr·∫°ng th√°i: `open`, `in_progress`, `closed`'
            },
            {
              name: 'üîç Xem chi ti·∫øt bug',
              value: '*bug detail --id=47\n\n' +
                'Hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin c·ªßa bug, bao g·ªìm c√°c gi·∫£i ph√°p.'
            },
            {
              name: '‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin bug',
              value: '*bug update --id=47 --status="in_progress" --severity="high"'
            },
            {
              name: 'üíª Tham s·ªë n√¢ng cao',
              value: '*bug create --title="Bug XYZ" --steps="1. ƒêƒÉng nh·∫≠p\\n2. ƒê·ª£i token h·∫øt h·∫°n"\n' +
                '*bug create --environment=\'{"os":"Ubuntu 22.04","browser":"Chrome 118"}\''
            },
            {
              name: 'üìå L∆∞u √Ω quan tr·ªçng',
              value: '‚Ä¢ Tham s·ªë `--title` l√† b·∫Øt bu·ªôc khi t·∫°o bug m·ªõi\n' +
                '‚Ä¢ V·ªõi JSON d√πng: `\'{"key":"value"}\'`\n' +
                '‚Ä¢ Xu·ªëng d√≤ng trong steps: `\\n`'
            }
          ],
          footer: {
            text: 'G√µ *bug ho·∫∑c *bug help ƒë·ªÉ hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y',
          },
        },
      ],
    });
  }

  private async handleCreate(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { title, desc, severity, steps, environment } = args;

    if (!title) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title.',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title.')
        )
      );
    }

    if (severity && !Object.values(BugSeverity).includes(severity as BugSeverity)) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå M·ª©c ƒë·ªô nghi√™m tr·ªçng kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugSeverity).join(', ')}.`,
          createPreMarkdown(`‚ùå M·ª©c ƒë·ªô nghi√™m tr·ªçng kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugSeverity).join(', ')}.`)
        )
      );
    }

    let parsedEnvironment = {};
    if (environment) {
      try {
        parsedEnvironment = JSON.parse(environment);
      } catch (error) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho environment: ${error.message}`,
            createPreMarkdown(`‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho environment: ${error.message}`)
          )
        );
      }
    }

    const newBug = await this.bugService.create({
      title,
      description: desc || '',
      severity: severity as BugSeverity || BugSeverity.MEDIUM,
      steps: steps || '',
      environment: parsedEnvironment,
      status: BugStatus.OPEN,
    });

    let environmentText = '';
    if (Object.keys(parsedEnvironment).length > 0) {
      environmentText = '\nM√¥i tr∆∞·ªùng:\n';
      for (const [key, value] of Object.entries(parsedEnvironment)) {
        environmentText += `‚Ä¢ ${key}: ${value}\n`;
      }
    }

    return safeReply(
      messageChannel,
      createReplyOptions(
        `‚úÖ ƒê√£ b√°o c√°o bug! ID: ${newBug.id}\nM·ª©c ƒë·ªô: ${newBug.severity}\nTr·∫°ng th√°i: ${newBug.status}${environmentText}\nS·ª≠ d·ª•ng /bug detail --id=${newBug.id} ƒë·ªÉ xem chi ti·∫øt.`,
        createPreMarkdown(`‚úÖ ƒê√£ b√°o c√°o bug! ID: ${newBug.id}\nM·ª©c ƒë·ªô: ${newBug.severity}\nTr·∫°ng th√°i: ${newBug.status}${environmentText}\nS·ª≠ d·ª•ng /bug detail --id=${newBug.id} ƒë·ªÉ xem chi ti·∫øt.`)
      )
    );
  }

  private async handleList(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { status } = args;

    if (!status || !Object.values(BugStatus).includes(status as BugStatus)) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå Thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --status v·ªõi m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugStatus).join(', ')}.`,
          createPreMarkdown(`‚ùå Thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --status v·ªõi m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugStatus).join(', ')}.`)
        )
      );
    }

    const bugs = await this.bugService.listByStatus(status as BugStatus);

    if (bugs.length === 0) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `üìã Kh√¥ng t√¨m th·∫•y bug n√†o ·ªü tr·∫°ng th√°i "${status}".`,
          createPreMarkdown(`üìã Kh√¥ng t√¨m th·∫•y bug n√†o ·ªü tr·∫°ng th√°i "${status}".`)
        )
      );
    }

    let listText = `üìã Danh s√°ch bug ·ªü tr·∫°ng th√°i "${status}":\n\n`;

    bugs.forEach((bug, index) => {
      const solutionCount = bug.solutions ? bug.solutions.length : 0;
      listText += `${index + 1}. #${bug.id}: ${bug.title} - ${bug.severity}${solutionCount > 0 ? ` (${solutionCount} gi·∫£i ph√°p)` : ''}\n`;
    });

    listText += '\nüìå C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n';
    listText += `‚Ä¢ /bug detail --id=${bugs[0].id}    (Xem chi ti·∫øt bug)\n`;
    listText += `‚Ä¢ /bug update --id=${bugs[0].id} --status="in_progress"    (C·∫≠p nh·∫≠t tr·∫°ng th√°i)\n`;
    listText += `‚Ä¢ /solution create --bug-id=${bugs[0].id}    (Th√™m gi·∫£i ph√°p)\n`;

    return safeReply(
      messageChannel,
      createReplyOptions(
        listText,
        createPreMarkdown(listText)
      )
    );
  }

  private async handleDetail(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const bug = await this.bugService.findById(parseInt(id));

      let environmentText = 'Kh√¥ng c√≥';
      if (bug.environment && Object.keys(bug.environment).length > 0) {
        environmentText = Object.entries(bug.environment)
          .map(([key, value]) => `‚Ä¢ ${key}: ${value}`)
          .join('\n');
      }

      let solutionsText = 'Ch∆∞a c√≥ gi·∫£i ph√°p';
      if (bug.solutions && bug.solutions.length > 0) {
        solutionsText = bug.solutions.map((solution) =>
          `‚Ä¢ #${solution.id}: ${solution.title}`
        ).join('\n');
      }

      return safeReply(
        messageChannel,
        {
          embed: [
            {
              color: getRandomColor(),
              title: `üêõ Bug #${bug.id}: "${bug.title}"`,
              fields: [
                {
                  name: 'M·ª©c ƒë·ªô',
                  value: bug.severity,
                  inline: true,
                },
                {
                  name: 'Tr·∫°ng th√°i',
                  value: bug.status,
                  inline: true,
                },
                {
                  name: 'M√¥ t·∫£',
                  value: bug.description || '*(Kh√¥ng c√≥ m√¥ t·∫£)*',
                },
                {
                  name: 'C√°c b∆∞·ªõc t√°i hi·ªán',
                  value: bug.steps || '*(Kh√¥ng c√≥ c√°c b∆∞·ªõc t√°i hi·ªán)*',
                },
                {
                  name: 'M√¥i tr∆∞·ªùng',
                  value: environmentText,
                },
                {
                  name: 'üí° Gi·∫£i ph√°p ƒë√£ c√≥',
                  value: solutionsText,
                },
                {
                  name: 'ƒê√£ t·∫°o',
                  value: new Date(bug.createdAt).toLocaleString(),
                },
              ],
              footer: {
                text: 'DevHelper Bot',
              },
            },
          ],
        }
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleUpdate(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id, title, desc, severity, status, steps, environment } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const existingBug = await this.bugService.findById(parseInt(id));

      if (severity && !Object.values(BugSeverity).includes(severity as BugSeverity)) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            `‚ùå M·ª©c ƒë·ªô nghi√™m tr·ªçng kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugSeverity).join(', ')}.`,
            createPreMarkdown(`‚ùå M·ª©c ƒë·ªô nghi√™m tr·ªçng kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugSeverity).join(', ')}.`)
          )
        );
      }

      if (status && !Object.values(BugStatus).includes(status as BugStatus)) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            `‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugStatus).join(', ')}.`,
            createPreMarkdown(`‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng m·ªôt trong c√°c gi√° tr·ªã: ${Object.values(BugStatus).join(', ')}.`)
          )
        );
      }

      const updateData: any = {};
      if (title) updateData.title = title;
      if (desc !== undefined) updateData.description = desc;
      if (severity) updateData.severity = severity;
      if (status) updateData.status = status;
      if (steps !== undefined) updateData.steps = steps;

      if (environment) {
        try {
          updateData.environment = JSON.parse(environment);
        } catch (error) {
          return safeReply(
            messageChannel,
            createReplyOptions(
              `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho environment: ${error.message}`,
              createPreMarkdown(`‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho environment: ${error.message}`)
            )
          );
        }
      }

      if (Object.keys(updateData).length === 0) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            '‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.',
            createPreMarkdown('‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.')
          )
        );
      }

      await this.bugService.update(parseInt(id), updateData);

      const updatedBug = await this.bugService.findById(parseInt(id));

      let changesText = '';
      for (const key of Object.keys(updateData)) {
        let oldValue = existingBug[key];
        let newValue = updatedBug[key];

        if (typeof oldValue === 'object') oldValue = JSON.stringify(oldValue);
        if (typeof newValue === 'object') newValue = JSON.stringify(newValue);

        changesText += `‚Ä¢ ${key}: ${oldValue} ‚ûî ${newValue}\n`;
      }

      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t bug #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /bug detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`,
          createPreMarkdown(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t bug #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /bug detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }
}