import { Command } from 'src/bot/base/commandRegister.decorator';
import { CommandMessage } from 'src/bot/base/command.abstract';
import { ChannelMessage } from 'mezon-sdk';
import { CommandService } from 'src/bot/services/command.service';
import { MezonClientService } from 'src/mezon/services/mezon-client.service';
import { getRandomColor } from 'src/bot/utils/helps';
import { ButtonAction, MessageComponentType } from 'src/bot/constants/types';
import { ActionRowComponent, ButtonComponent } from 'src/bot/constants/interfaces';
import { parseArgs } from 'src/bot/utils/parse-args';
import { safeReply, createReplyOptions, createPreMarkdown } from 'src/bot/utils/reply-helpers';

@Command('command')
export class CommandBotCommand extends CommandMessage {
  constructor(
    private commandService: CommandService,
    clientService: MezonClientService,
  ) {
    super(clientService);
  }

  async execute(args: string[], message: ChannelMessage): Promise<any> {
    const messageChannel = await this.getChannelMessage(message);
    if (!messageChannel) return;

    if (args.length === 0) {
      return this.showHelp(messageChannel);
    }

    const subCommand = args[0].toLowerCase();
    const remainingArgs = parseArgs(args.slice(1));

    try {
      switch (subCommand) {
        case 'save':
          return this.handleSave(remainingArgs, messageChannel);
        case 'list':
          return this.handleList(remainingArgs, messageChannel);
        case 'detail':
          return this.handleDetail(remainingArgs, messageChannel);
        case 'update':
          return this.handleUpdate(remainingArgs, messageChannel);
        case 'delete':
          return this.handleDelete(remainingArgs, messageChannel);
        case 'restore':
          return this.handleRestore(remainingArgs, messageChannel);
        case 'find':
          return this.handleFind(remainingArgs, messageChannel);
        default:
          return this.showHelp(messageChannel);
      }
    } catch (error) {
      console.error('Error in CommandCommand:', error);
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async showHelp(messageChannel: any): Promise<any> {
    return safeReply(messageChannel, {
      t: 'üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh command',
      embed: [
        {
          color: getRandomColor(),
          title: 'DevHelper - Command Help',
          description: 'C√¥ng c·ª• gi√∫p b·∫°n l∆∞u tr·ªØ v√† qu·∫£n l√Ω c√°c l·ªánh th∆∞·ªùng d√πng:',
          fields: [
            {
              name: '1Ô∏è‚É£ Xem danh s√°ch l·ªánh',
              value: '*command list --category="git"\n\nLi·ªát k√™ c√°c l·ªánh trong danh m·ª•c (VD: git, docker).'
            },
            {
              name: '2Ô∏è‚É£ T√¨m ki·∫øm l·ªánh',
              value: '*command find --query="stash"\n\nT√¨m c√°c l·ªánh li√™n quan ƒë·∫øn t·ª´ kh√≥a.'
            },
            {
              name: '3Ô∏è‚É£ Xem chi ti·∫øt l·ªánh',
              value: '*command detail --id=125\n\nHi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin c·ªßa l·ªánh c√≥ ID 125.'
            },
            {
              name: '4Ô∏è‚É£ L∆∞u l·ªánh m·ªõi',
              value: '*command save --title="git-stash" --command="git stash" --desc="L∆∞u thay ƒë·ªïi t·∫°m th·ªùi" --category="git"\n\nTh√™m l·ªánh m·ªõi v·ªõi tham s·ªë c∆° b·∫£n.'
            },
            {
              name: '5Ô∏è‚É£ L∆∞u l·ªánh v·ªõi tham s·ªë v√† v√≠ d·ª•',
              value: '*command save --title="git-stash" --command="git stash" --category="git" --parameters=\'{"branch":"T√™n nh√°nh"}\' --examples=\'["git stash apply"]\'\n\nL∆∞u √Ω ƒë·ªãnh d·∫°ng JSON ƒë·∫∑c bi·ªát cho parameters v√† examples.'
            },
            {
              name: '6Ô∏è‚É£ Qu·∫£n l√Ω l·ªánh ƒë√£ l∆∞u',
              value: '*command update --id=125 --title="T√™n m·ªõi"\n*command delete --id=125\n*command restore --id=125\n\nC·∫≠p nh·∫≠t, x√≥a ho·∫∑c kh√¥i ph·ª•c l·ªánh theo ID.'
            },
            {
              name: 'üìù L∆∞u √Ω quan tr·ªçng',
              value: '‚Ä¢ Tham s·ªë b·∫Øt bu·ªôc khi t·∫°o m·ªõi: `--title`, `--command` v√† `--category`\n\n' +
                '‚Ä¢ V·ªõi JSON, d√πng ngo·∫∑c ƒë∆°n b√™n ngo√†i, ngo·∫∑c k√©p b√™n trong: `\'{"key":"value"}\'`\n\n' +
                '‚Ä¢ D√πng `*command list` tr∆∞·ªõc ƒë·ªÉ bi·∫øt ID c√°c l·ªánh c·∫ßn qu·∫£n l√Ω'
            }
          ],
          footer: {
            text: 'G√µ *command ho·∫∑c *command help ƒë·ªÉ hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y',
          },
        },
      ],
    });
  }

  private async handleSave(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { title, command, desc, category, parameters, examples } = args;

    if (!title || !command || !category) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title, --command v√† --category.',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --title, --command v√† --category.')
        )
      );
    }

    let parsedParameters = {};
    let parsedExamples = [];

    try {
      if (parameters) {
        parsedParameters = JSON.parse(parameters);
      }
      if (examples) {
        parsedExamples = JSON.parse(examples);
      }
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters ho·∫∑c examples: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters ho·∫∑c examples: ${error.message}`)
        )
      );
    }

    const newCommand = await this.commandService.create({
      title,
      command,
      description: desc || '',
      category,
      parameters: parsedParameters,
      examples: parsedExamples,
    });

    let parametersText = '';
    if (Object.keys(parsedParameters).length > 0) {
      parametersText = '\nL·ªánh c√≥ ' + Object.keys(parsedParameters).length + ' tham s·ªë:\n';
      for (const [param, desc] of Object.entries(parsedParameters)) {
        parametersText += `‚Ä¢ ${param}: ${desc}\n`;
      }
    }

    return safeReply(
      messageChannel,
      createReplyOptions(
        `‚úÖ ƒê√£ l∆∞u l·ªánh! ID: ${newCommand.id}\n${parametersText}\nS·ª≠ d·ª•ng /command detail --id=${newCommand.id} ƒë·ªÉ xem chi ti·∫øt.`,
        createPreMarkdown(`‚úÖ ƒê√£ l∆∞u l·ªánh! ID: ${newCommand.id}\n${parametersText}\nS·ª≠ d·ª•ng /command detail --id=${newCommand.id} ƒë·ªÉ xem chi ti·∫øt.`)
      )
    );
  }

  private async handleList(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { category } = args;

    if (!category) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --category.',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --category.')
        )
      );
    }

    const commands = await this.commandService.listByCategory(category);

    if (commands.length === 0) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `üìã Kh√¥ng t√¨m th·∫•y l·ªánh n√†o trong danh m·ª•c "${category}".`,
          createPreMarkdown(`üìã Kh√¥ng t√¨m th·∫•y l·ªánh n√†o trong danh m·ª•c "${category}".`)
        )
      );
    }

    let listText = `üìã Danh s√°ch l·ªánh trong danh m·ª•c "${category}":\n\n`;

    commands.forEach((cmd, index) => {
      listText += `${index + 1}. #${cmd.id}: ${cmd.title} - ${cmd.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
    });

    listText += '\nüìå C√°c l·ªánh b·∫°n c√≥ th·ªÉ d√πng:\n';
    listText += `‚Ä¢ /command detail --id=${commands[0].id}    (Xem chi ti·∫øt l·ªánh)\n`;
    listText += `‚Ä¢ /command update --id=${commands[0].id}    (C·∫≠p nh·∫≠t l·ªánh)\n`;
    listText += `‚Ä¢ /command delete --id=${commands[0].id}    (X√≥a l·ªánh)\n`;

    return safeReply(
      messageChannel,
      createReplyOptions(
        listText,
        createPreMarkdown(listText)
      )
    );
  }

  private async handleDetail(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const command = await this.commandService.findById(parseInt(id));

      let parametersText = 'Kh√¥ng c√≥';
      if (command.parameters && Object.keys(command.parameters).length > 0) {
        parametersText = '';
        for (const [param, desc] of Object.entries(command.parameters)) {
          parametersText += `‚Ä¢ ${param}: ${desc}\n`;
        }
      }

      let examplesText = 'Kh√¥ng c√≥';
      if (command.examples && command.examples.length > 0) {
        examplesText = '';
        for (const example of command.examples) {
          examplesText += `‚Ä¢ ${example}\n`;
        }
      }

      const createdAt = new Date(command.createdAt);
      const timeAgo = this.getTimeAgo(createdAt);

      return safeReply(
        messageChannel,
        {
          embed: [
            {
              color: getRandomColor(),
              title: `üìù Command #${command.id}: "${command.title}"`,
              fields: [
                {
                  name: 'Danh m·ª•c',
                  value: command.category,
                },
                {
                  name: 'M√¥ t·∫£',
                  value: command.description || '*(Kh√¥ng c√≥ m√¥ t·∫£)*',
                },
                {
                  name: 'L·ªánh',
                  value: '```\n' + command.command + '\n```',
                },
                {
                  name: 'Tham s·ªë',
                  value: parametersText,
                },
                {
                  name: 'V√≠ d·ª•',
                  value: examplesText,
                },
                {
                  name: 'Tr·∫°ng th√°i',
                  value: command.deleted ? 'üóëÔ∏è ƒê√£ x√≥a' : '‚úÖ Ho·∫°t ƒë·ªông',
                },
                {
                  name: 'ƒê√£ t·∫°o',
                  value: `${createdAt.toLocaleString()} (${timeAgo})`,
                },
              ],
              footer: {
                text: 'DevHelper Bot',
              },
            },
          ],
        }
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleUpdate(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id, title, command, desc, category, parameters, examples } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const existingCommand = await this.commandService.findById(parseInt(id));

      const updateData: any = {};
      if (title) updateData.title = title;
      if (command) updateData.command = command;
      if (desc !== undefined) updateData.description = desc;
      if (category) updateData.category = category;

      if (parameters) {
        try {
          updateData.parameters = JSON.parse(parameters);
        } catch (error) {
          return safeReply(
            messageChannel,
            createReplyOptions(
              `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters: ${error.message}`,
              createPreMarkdown(`‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho parameters: ${error.message}`)
            )
          );
        }
      }

      if (examples) {
        try {
          updateData.examples = JSON.parse(examples);
        } catch (error) {
          return safeReply(
            messageChannel,
            createReplyOptions(
              `‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho examples: ${error.message}`,
              createPreMarkdown(`‚ùå L·ªói: Format JSON kh√¥ng h·ª£p l·ªá cho examples: ${error.message}`)
            )
          );
        }
      }

      if (Object.keys(updateData).length === 0) {
        return safeReply(
          messageChannel,
          createReplyOptions(
            '‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.',
            createPreMarkdown('‚ùå Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.')
          )
        );
      }

      await this.commandService.update(parseInt(id), updateData);

      const updatedCommand = await this.commandService.findById(parseInt(id));

      let changesText = '';
      for (const key of Object.keys(updateData)) {
        let oldValue = existingCommand[key];
        let newValue = updatedCommand[key];

        if (typeof oldValue === 'object') oldValue = JSON.stringify(oldValue);
        if (typeof newValue === 'object') newValue = JSON.stringify(newValue);

        changesText += `‚Ä¢ ${key}: ${oldValue} ‚ûî ${newValue}\n`;
      }

      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªánh #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`,
          createPreMarkdown(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªánh #${id}:\n\n${changesText}\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleDelete(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      const command = await this.commandService.findById(parseInt(id));
      await this.commandService.softDelete(parseInt(id));

      return safeReply(
        messageChannel,
        createReplyOptions(
          `üóëÔ∏è ƒê√£ x√≥a l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command restore --id=${id} ƒë·ªÉ kh√¥i ph·ª•c.`,
          createPreMarkdown(`üóëÔ∏è ƒê√£ x√≥a l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command restore --id=${id} ƒë·ªÉ kh√¥i ph·ª•c.`)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleRestore(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { id } = args;

    if (!id || isNaN(parseInt(id))) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá: Vui l√≤ng cung c·∫•p --id (s·ªë).')
        )
      );
    }

    try {
      await this.commandService.restore(parseInt(id));
      const command = await this.commandService.findById(parseInt(id));

      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`,
          createPreMarkdown(`‚ôªÔ∏è ƒê√£ kh√¥i ph·ª•c l·ªánh #${id} "${command.title}"\nS·ª≠ d·ª•ng /command detail --id=${id} ƒë·ªÉ xem chi ti·∫øt.`)
        )
      );
    } catch (error) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `‚ùå L·ªói: ${error.message}`,
          createPreMarkdown(`‚ùå L·ªói: ${error.message}`)
        )
      );
    }
  }

  private async handleFind(args: Record<string, string>, messageChannel: any): Promise<any> {
    const { query } = args;

    if (!query) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          '‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --query.',
          createPreMarkdown('‚ùå Thi·∫øu th√¥ng tin: Vui l√≤ng cung c·∫•p --query.')
        )
      );
    }

    const commands = await this.commandService.search(query);

    if (commands.length === 0) {
      return safeReply(
        messageChannel,
        createReplyOptions(
          `üîç Kh√¥ng t√¨m th·∫•y l·ªánh n√†o kh·ªõp v·ªõi "${query}".`,
          createPreMarkdown(`üîç Kh√¥ng t√¨m th·∫•y l·ªánh n√†o kh·ªõp v·ªõi "${query}".`)
        )
      );
    }

    let listText = `üîç T√¨m th·∫•y ${commands.length} l·ªánh:\n`;

    commands.forEach((cmd, index) => {
      listText += `${index + 1}. #${cmd.id}: ${cmd.title} - ${cmd.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`;
    });

    listText += '\nüìå ƒê·ªÉ xem chi ti·∫øt, s·ª≠ d·ª•ng:\n';
    commands.slice(0, 5).forEach(cmd => {
      listText += `‚Ä¢ /command detail --id=${cmd.id}\n`;
    });

    return safeReply(
      messageChannel,
      createReplyOptions(
        listText,
        createPreMarkdown(listText)
      )
    );
  }

  // Helper ƒë·ªÉ t√≠nh th·ªùi gian t∆∞∆°ng ƒë·ªëi
  private getTimeAgo(date: Date): string {
    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);

    let interval = Math.floor(seconds / 31536000);
    if (interval >= 1) {
      return interval === 1 ? "1 nƒÉm tr∆∞·ªõc" : `${interval} nƒÉm tr∆∞·ªõc`;
    }

    interval = Math.floor(seconds / 2592000);
    if (interval >= 1) {
      return interval === 1 ? "1 th√°ng tr∆∞·ªõc" : `${interval} th√°ng tr∆∞·ªõc`;
    }

    interval = Math.floor(seconds / 86400);
    if (interval >= 1) {
      return interval === 1 ? "1 ng√†y tr∆∞·ªõc" : `${interval} ng√†y tr∆∞·ªõc`;
    }

    interval = Math.floor(seconds / 3600);
    if (interval >= 1) {
      return interval === 1 ? "1 gi·ªù tr∆∞·ªõc" : `${interval} gi·ªù tr∆∞·ªõc`;
    }

    interval = Math.floor(seconds / 60);
    if (interval >= 1) {
      return interval === 1 ? "1 ph√∫t tr∆∞·ªõc" : `${interval} ph√∫t tr∆∞·ªõc`;
    }

    return Math.floor(seconds) === 0 ? "v·ª´a xong" : `${Math.floor(seconds)} gi√¢y tr∆∞·ªõc`;
  }
}